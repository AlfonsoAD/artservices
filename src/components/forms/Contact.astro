---
import Input from '@components/ui/form/Input.astro';
import Textarea from '@components/ui/form/Textarea.astro';

const formBackground = 'light';
---

<form id="contact-form" class="space-y-6 bg-white p-6 rounded-lg" novalidate>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Input label="Nombre" id="name" name="name" required background={formBackground} />
        <Input label="Correo electrónico" type="email" id="email" name="email" required background={formBackground} />
    </div>
    <Textarea label="Mensaje" id="message" name="message" required background={formBackground} />
    <div id="form-error" class="text-red-600 text-sm my-2"></div>
    <div class="mt-6 flex justify-end">
        <button
            type="submit"
            id="send"
            class="h-10 px-4 py-2 text-small group relative overflow-hidden items-center justify-center rounded-border-small font-medium transition-all duration-300 ease-out focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 rounded-md flex gap-2 bg-primary text-white hover:bg-primary-light focus-visible:ring-primary hover:ring-2 hover:ring-primary hover:ring-offset-2"
            >Enviar</button
        >
    </div>
</form>
<script>
    import emailjs from '@emailjs/browser';

    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('contact-form');
        const errorDiv = document.getElementById('form-error');
        if (!form) return;

        const validateEmail = (email: string) => {
            // Regex simple para validar emails
            return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
        };

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            e.stopPropagation();

            errorDiv!.textContent = '';

            const formData = new FormData(form as HTMLFormElement);

            // Validaciones básicas
            const name = formData.get('name')?.toString().trim();
            const email = formData.get('email')?.toString().trim();
            const message = formData.get('message')?.toString().trim();

            if (!name) {
                errorDiv!.textContent = 'El nombre es obligatorio.';
                return;
            }
            if (!email || !validateEmail(email)) {
                errorDiv!.textContent = 'El correo electrónico no es válido.';
                return;
            }
            if (!message) {
                errorDiv!.textContent = 'El mensaje es obligatorio.';
                return;
            }

            // Parámetros para EmailJS
            const templateParams = {
                title: 'Nuevo mensaje para cotización',
                name,
                email,
                message,
            };

            try {
                await emailjs.send(
                    'service_hxb4fjq', // Service ID (público)
                    'template_ue4mbci', // Template ID
                    templateParams,
                    'wTf7-7J0PN4-wB1M7' // Public Key (puede ir en frontend)
                );
                alert('¡Mensaje enviado con éxito!');
                // form.reset();
            } catch (error) {
                errorDiv!.textContent = 'Hubo un error al enviar el mensaje. Intenta nuevamente.';
                console.error('Error de EmailJS:', error);
            }
        });
    });
</script>
